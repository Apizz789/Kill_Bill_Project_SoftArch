@startuml
ApiEventBuilder --|> EventBaseBuilder
BCDEventBuilder --|> EventBaseBuilder
PhaseEventBuilder --|> EventBaseBuilder

ApiEventBuilder --> ApiEvent
BCDEventBuilder --> BCDEvent
PhaseEventBuilder --> PhaseEvent

ApiEventBase ..|> ApiEvent
BCDEventBase ..|> BCDEvent
PhaseEventBase ..|> PhaseEvent


abstract class EventBaseBuilder{
  + EventBaseBuilder()
  + EventBaseBuilder(event: SubscriptionBaseEvent)
  + EventBaseBuilder(copy: EventBaseBuilder<?>)
  + getTotalOrdering(): long
  + getUuid(): UUID
  + getCreatedDate(): DateTime
  + getUpdatedDate(): DateTime
  + getSubscriptionId(): UUID
  + getEffectiveDate(): DateTime
  + isActive(): boolean
  + {abstract} build(): SubscriptionBaseEvent
}

class ApiEventBuilder {
  + ApiEventBuilder(apiEvent: ApiEvent)
}

class BCDEventBuilder {
  + BCDEventBuilder(event: BCDEvent) 
}

class PhaseEventBuilder {
  + PhaseEventBuilder(phaseEvent: PhaseEvent)
}

interface BCDEvent {
  + getBillCycleDayLocal(): Integer 
}

interface ApiEvent {
  + getEventPlan(): String
  + getEventPlanPhase(): String
  + getApiEventType(): ApiEventType
  + getPriceList(): String
  + isFromDisk(): boolean
}

interface PhaseEvent {
  + getPhase(): String
}
@enduml