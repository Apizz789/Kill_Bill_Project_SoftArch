@startuml

ApiEventBuilder --|> EventBaseBuilder
BCDEventBuilder --|> EventBaseBuilder
PhaseEventBuilder --|> EventBaseBuilder

ApiEventBuilder --> ApiEvent
BCDEventBuilder --> BCDEvent
PhaseEventBuilder --> PhaseEvent

abstract class EventBaseBuilder{
  - totalOrdering: long
  - uuid : UUID  
  - subscriptionId: UUID  
  - createdDate: DateTime  
  - updatedDate: DateTime   
  - effectiveDate: DateTime  

  - isActive: boolean 

  + EventBaseBuilder()
  + EventBaseBuilder(event: SubscriptionBaseEvent)
  + EventBaseBuilder(copy: EventBaseBuilder<?>)
  + getTotalOrdering(): long
  + getUuid(): UUID
  + getCreatedDate(): DateTime
  + getUpdatedDate(): DateTime
  + getSubscriptionId(): UUID
  + getEffectiveDate(): DateTime
  + isActive(): boolean
  + {abstract} build(): SubscriptionBaseEvent

}

class ApiEventBuilder {
  - apiEventType: ApiEventType
  - eventPlan: String 
  - eventPlanPhase: String 
  - eventPriceList: String 
  - fromDisk: boolean 

  + ApiEventBuilder(apiEvent: ApiEvent)
  + ApiEventBuilder(base: EventBaseBuilder<?>)
  + getApiEventType(): ApiEventType 
  + getEventPlan(): String
  + getEventPlanPhase(): String
  + getEventPriceList(): String 
  + isFromDisk(): boolean
  + setFromDisk(fromDisk: boolean): ApiEventBuilder
  + setApiEventType(eventType: ApiEventType): ApiEventBuilder
  + setEventPlan(eventPlan: String): ApiEventBuilder
  + setEventPlanPhase(eventPlanPhase: String): ApiEventBuilder
  + setEventPriceList(eventPriceList: String): ApiEventBuilder
  + build(): ApiEventBase
}

class BCDEventBuilder {
  - billCycleDayLocal: Integer

  + BCDEventBuilder()
  + BCDEventBuilder(event: BCDEvent) 
  + BCDEventBuilder(base: EventBaseBuilder<?>)
  + getBillCycleDayLocal(): Integer
  + setBillCycleDayLocal(billCycleDayLocal: Integer): BCDEventBuilder
}

class PhaseEventBuilder {
  - phaseName: String 

  + PhaseEventBuilder()
  + PhaseEventBuilder(phaseEvent: PhaseEvent)
  + PhaseEventBuilder(base: EventBaseBuilder<?>)
  + setPhaseName(phaseName: String): PhaseEventBuilder
  + getPhaseName(): String
  + build(): PhaseEvent 
}

interface BCDEvent {
  + getBillCycleDayLocal(): Integer 
}

interface ApiEvent {
  + getEventPlan(): String
  + getEventPlanPhase(): String
  + getApiEventType(): ApiEventType
  + getPriceList(): String
  + isFromDisk(): boolean
}

interface PhaseEvent {
  + getPhase(): String
}

@enduml